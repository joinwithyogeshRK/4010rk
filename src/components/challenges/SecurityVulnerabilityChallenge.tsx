import { useState, useEffect } from 'react';
import { CheckCircle, XCircle, AlertTriangle } from 'lucide-react';

type SecurityVulnerabilityChallengeProps = {
  status: 'ready' | 'active' | 'success' | 'failed';
  onComplete: (score: number) => void;
  onFail: () => void;
};

type CodeSnippet = {
  id: number;
  code: string;
  vulnerabilities: string[];
  options: string[];
};

const codeSnippets: CodeSnippet[] = [
  {
    id: 1,
    code: `function login(username, password) {
  const query = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";
  return db.execute(query);
}`,
    vulnerabilities: ["SQL Injection", "Unsanitized Input"],
    options: ["SQL Injection", "XSS", "CSRF", "Unsanitized Input", "No Vulnerabilities"]
  },
  {
    id: 2,
    code: `app.get('/user/:id', (req, res) => {
  const userId = req.params.id;
  const userHtml = "<div>" + userData[userId] + "</div>";
  res.send(userHtml);
});`,
    vulnerabilities: ["XSS", "Unsanitized Input"],
    options: ["SQL Injection", "XSS", "CSRF", "Unsanitized Input", "No Vulnerabilities"]
  },
  {
    id: 3,
    code: `function transferFunds(amount, toAccount) {
  if (session.isAuthenticated) {
    const fromAccount = session.user.accountId;
    return bank.transfer(fromAccount, toAccount, amount);
  }
}`,
    vulnerabilities: ["CSRF", "Missing Authorization"],
    options: ["SQL Injection", "XSS", "CSRF", "Missing Authorization", "No Vulnerabilities"]
  }
];

const SecurityVulnerabilityChallenge = ({ status, onComplete, onFail }: SecurityVulnerabilityChallengeProps) => {
  const [currentSnippet, setCurrentSnippet] = useState<CodeSnippet | null>(null);
  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);
  const [snippetsCompleted, setSnippetsCompleted] = useState(0);
  const [feedback, setFeedback] = useState<{ correct: boolean; message: string } | null>(null);
  const [score, setScore] = useState(0);
  
  // Initialize challenge
  useEffect(() => {
    if (status === 'active') {
      const randomSnippet = codeSnippets[0]; // Start with the first snippet
      setCurrentSnippet(randomSnippet);
      setSelectedOptions([]);
      setSnippetsCompleted(0);
      setFeedback(null);
      setScore(0);
    }
  }, [status]);
  
  const handleOptionToggle = (option: string) => {
    setSelectedOptions(prev => {
      if (prev.includes(option)) {
        return prev.filter(item => item !== option);
      } else {
        return [...prev, option];
      }
    });
  };
  
  const handleSubmit = () => {
    if (!currentSnippet) return;
    
    // Check if answers are correct
    const correctAnswers = currentSnippet.vulnerabilities;
    const isCorrect = 
      selectedOptions.length === correctAnswers.length && 
      selectedOptions.every(option => correctAnswers.includes(option));
    
    if (isCorrect) {
      // Add points to score
      const pointsEarned = 100 / codeSnippets.length;
      setScore(prev => prev + pointsEarned);
      
      setFeedback({
        correct: true,
        message: `Correct! Vulnerabilities identified: ${correctAnswers.join(', ')}`
      });
      
      // Move to next snippet or complete challenge
      setTimeout(() => {
        const nextSnippetIndex = snippetsCompleted + 1;
        
        if (nextSnippetIndex >= codeSnippets.length) {
          // Challenge complete
          onComplete(Math.round(score + pointsEarned));
        } else {
          setCurrentSnippet(codeSnippets[nextSnippetIndex]);
          setSelectedOptions([]);
          setSnippetsCompleted(nextSnippetIndex);
          setFeedback(null);
        }
      }, 2000);
    } else {
      setFeedback({
        correct: false,
        message: `Incorrect. The vulnerabilities were: ${correctAnswers.join(', ')}`
      });
      
      // Give one more chance before failing
      if (snippetsCompleted > 0) {
        setTimeout(() => {
          onFail();
        }, 2000);
      } else {
        // Move to next snippet after showing feedback
        setTimeout(() => {
          const nextSnippetIndex = snippetsCompleted + 1;
          setCurrentSnippet(codeSnippets[nextSnippetIndex]);
          setSelectedOptions([]);
          setSnippetsCompleted(nextSnippetIndex);
          setFeedback(null);
        }, 2000);
      }
    }
  };
  
  if (status !== 'active' || !currentSnippet) return null;
  
  return (
    <div className="space-y-6">
      <div className="bg-surface border border-primary/30 p-4 rounded-md">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-bold text-primary">Identify Security Vulnerabilities</h3>
          <div className="text-primary">
            Snippet {snippetsCompleted + 1}/{codeSnippets.length}
          </div>
        </div>
        
        <div className="mb-6">
          <div className="bg-surface-muted p-4 rounded-md overflow-x-auto">
            <pre className="font-mono text-foreground/90 whitespace-pre-wrap">{currentSnippet.code}</pre>
          </div>
        </div>
        
        <div className="mb-6">
          <h4 className="text-primary mb-2">Select all vulnerabilities in this code:</h4>
          <div className="space-y-2">
            {currentSnippet.options.map(option => (
              <label 
                key={option} 
                className={`flex items-center gap-2 p-3 rounded-sm border cursor-pointer transition-colors ${selectedOptions.includes(option) ? 'border-primary bg-primary/10' : 'border-primary/30 hover:border-primary/50'}`}
              >
                <input
                  type="checkbox"
                  checked={selectedOptions.includes(option)}
                  onChange={() => handleOptionToggle(option)}
                  className="sr-only"
                />
                <div className={`w-5 h-5 border rounded-sm flex items-center justify-center ${selectedOptions.includes(option) ? 'bg-primary border-primary' : 'border-primary/50'}`}>
                  {selectedOptions.includes(option) && (
                    <CheckCircle className="h-4 w-4 text-primary-foreground" />
                  )}
                </div>
                <span>{option}</span>
              </label>
            ))}
          </div>
        </div>
        
        {feedback && (
          <div className={`p-3 rounded-md mb-4 flex items-center gap-2 ${feedback.correct ? 'bg-success/10 text-success' : 'bg-error/10 text-error'}`}>
            {feedback.correct ? (
              <CheckCircle className="h-5 w-5" />
            ) : (
              <XCircle className="h-5 w-5" />
            )}
            <p>{feedback.message}</p>
          </div>
        )}
        
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2 text-warning">
            <AlertTriangle className="h-5 w-5" />
            <span>Select all that apply</span>
          </div>
          <button 
            className="hacker-btn"
            onClick={handleSubmit}
            disabled={selectedOptions.length === 0 || feedback !== null}
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  );
};

export default SecurityVulnerabilityChallenge;
